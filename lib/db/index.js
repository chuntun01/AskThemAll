// lib/db/index.js

import mongoose from "mongoose";

// Note: L·∫•y chu·ªói k·∫øt n·ªëi t·ª´ file .env. ƒê√¢y l√† c√°ch an to√†n ƒë·ªÉ qu·∫£n l√Ω c√°c bi·∫øn b√≠ m·∫≠t.
const MONGODB_URI = process.env.MONGODB_URI;

// Note: Ki·ªÉm tra xem MONGODB_URI c√≥ t·ªìn t·∫°i kh√¥ng. N·∫øu kh√¥ng, d·ª´ng ·ª©ng d·ª•ng ngay l·∫≠p t·ª©c
// ƒë·ªÉ tr√°nh c√°c l·ªói kh√¥ng mong mu·ªën v·ªÅ sau. ƒê√¢y l√† m·ªôt "fail-fast check".
if (!MONGODB_URI) {
  throw new Error(
    "Vui l√≤ng ƒë·ªãnh nghƒ©a bi·∫øn MONGODB_URI trong file .env c·ªßa b·∫°n"
  );
}

/**
 * Note: Trong m√¥i tr∆∞·ªùng serverless, code c√≥ th·ªÉ ch·∫°y l·∫°i nhi·ªÅu l·∫ßn.
 * Ch√∫ng ta c·∫ßn m·ªôt n∆°i ƒë·ªÉ l∆∞u tr·ªØ k·∫øt n·ªëi database gi·ªØa c√°c l·∫ßn ch·∫°y ƒë√≥.
 * `global` l√† m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·∫∑c bi·ªát trong Node.js kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi
 * "hot-reloading", do ƒë√≥ n√≥ l√† n∆°i l√Ω t∆∞·ªüng ƒë·ªÉ l∆∞u cache k·∫øt n·ªëi.
 */
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
  // --- B∆Ø·ªöC 1: KI·ªÇM TRA K·∫æT N·ªêI C√ì S·∫¥N TRONG CACHE ---
  // Note: N·∫øu ƒë√£ c√≥ k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p tr∆∞·ªõc ƒë√≥, h√£y s·ª≠ d·ª•ng l·∫°i n√≥ ngay l·∫≠p t·ª©c.
  // ƒê√¢y l√† ph·∫ßn quan tr·ªçng nh·∫•t gi√∫p t·ªëi ∆∞u hi·ªáu su·∫•t v√† tr√°nh t·∫°o qu√° nhi·ªÅu k·∫øt n·ªëi t·ªõi DB.
  if (cached.conn) {
    console.log("üöÄ Using cached database connection");
    return cached.conn;
  }

  // --- B∆Ø·ªöC 2: N·∫æU CH∆ØA C√ì K·∫æT N·ªêI, T·∫†O M·ªòT K·∫æT N·ªêI M·ªöI ---
  // Note: Ch√∫ng ta cache l·∫°i "l·ªùi h·ª©a" (promise) c·ªßa vi·ªác k·∫øt n·ªëi.
  // ƒêi·ªÅu n√†y ngƒÉn ch·∫∑n vi·ªác nhi·ªÅu y√™u c·∫ßu API c√πng l√∫c c·ªë g·∫Øng t·∫°o k·∫øt n·ªëi m·ªõi (race condition).
  // Y√™u c·∫ßu ƒë·∫ßu ti√™n s·∫Ω t·∫°o promise, c√°c y√™u c·∫ßu sau s·∫Ω ch·ªù promise ƒë√≥ ho√†n th√†nh.
  if (!cached.promise) {
    const opts = {
      bufferCommands: false, // T·∫Øt buffer ƒë·ªÉ l·ªói k·∫øt n·ªëi s·∫Ω hi·ªán ra ngay l·∫≠p t·ª©c
    };

    cached.promise = mongoose
      .connect(MONGODB_URI, opts)
      .then((mongooseInstance) => {
        console.log("‚úÖ New database connection established");
        return mongooseInstance;
      });
  }

  // --- B∆Ø·ªöC 3: CH·ªú K·∫æT N·ªêI HO√ÄN T·∫§T V√Ä X·ª¨ L√ù L·ªñI ---
  // Note: Ch·ªù cho "l·ªùi h·ª©a" k·∫øt n·ªëi ·ªü tr√™n ho√†n t·∫•t v√† g√°n k·∫øt qu·∫£ v√†o cache.conn.
  try {
    cached.conn = await cached.promise;
  } catch (e) {
    // Note: N·∫øu k·∫øt n·ªëi th·∫•t b·∫°i (sai m·∫≠t kh·∫©u, l·ªói IP,...), h√£y x√≥a promise ƒë√£ cache
    // ƒë·ªÉ y√™u c·∫ßu ti·∫øp theo c√≥ th·ªÉ th·ª≠ k·∫øt n·ªëi l·∫°i.
    cached.promise = null;
    throw e;
  }

  // Note: Tr·∫£ v·ªÅ k·∫øt n·ªëi ƒë√£ ho√†n t·∫•t.
  return cached.conn;
}

export default connectDB;
